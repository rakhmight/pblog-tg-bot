const checkAccess = require('../utils/checkAccess')
const { initBlogBtn, cancelSetInstBtn } = require("../utils/buttons")
const { REPLY_TEXT } = require("../config/consts")
const { initUser, updateInst, getUserNick, updateAboutMe, updateContact, getInterests, createInterest } = require('../services/Blog')
const getUserProfile = require('../utils/getUserProfile')

const start = async ctx =>{
    try {
        let user = ctx.update.message.from
        if(checkAccess.check(ctx.message.from.id)){
            ctx.replyWithHTML(`‚úåÔ∏è –ü—Ä–∏–≤–µ—Ç, <a href="tg://user?id=${user.id}">${user.first_name}</a>!\n${REPLY_TEXT.getStart}`,
            {
                disable_web_page_preview: true,
                parse_mode: 'HTML',
                ...initBlogBtn
            })
        } else {
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>start) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const help = ctx =>{
    try {
        if(checkAccess.check(ctx.message.from.id)){
            ctx.replyWithHTML(REPLY_TEXT.help)
        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>help) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const startSetInst = async ctx =>{
    try {
        await ctx.answerCbQuery()
        let msg = ctx.update.callback_query.message
        await ctx.telegram.editMessageText(msg.chat.id, msg.message_id,0,REPLY_TEXT.getInst.getURL, { inline_keyboard: false })
        await ctx.scene.enter('setInstScene')
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>startSetInst) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const cancelAction = async ctx =>{
    try {
        let currentScene = ctx.session.__scenes.current
        let msg = ctx.update.callback_query.message
        if(currentScene){
            await ctx.reply('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ')
            await ctx.scene.leave('setInstScene')
        } else{
            await ctx.reply('‚ùóÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç–µ')
        }
        await ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>cancelAction) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const confirmInst = async ctx=>{
    await initUser(ctx.wizard.state.data)
    let msg = ctx.update.callback_query.message

    await ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
    await ctx.scene.leave('setInstScene')
    await ctx.scene.enter('fillBlogScene')
}

const cancelInst = async ctx=>{
    try {
        let msg = ctx.update.callback_query.message
        await ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
        await ctx.replyWithHTML(REPLY_TEXT.getInst.urlFormat, cancelSetInstBtn)
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>cancelInst) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const startArticlesTutorial = async ctx =>{
    try {
        await ctx.reply('articles')
        
        let msg = ctx.update.callback_query.message
        await ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>startArticlesTutorial) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const startCardsTutorial = async ctx =>{
    try {
        await ctx.reply('cards')
        
        let msg = ctx.update.callback_query.message
        await ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>startCardsTutorial) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const updateInstDatas = async ctx =>{
    try {
        if(checkAccess.check(ctx.message.from.id)){
            let msg = ctx.update.message.text
    
            if(msg.includes('@', 11)){
                newUrl = msg.split(' ')
                newUrl = newUrl[1].replace('@','')
                getUserProfile(newUrl)
                .then(async (data)=>{
                    if(!data){
                        await ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–∞—è @—Å—Å—ã–ª–∫–∞ –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑')
                        return
                    }
                    await updateInst(data)
                    await ctx.reply(`üìù –î–∞–Ω–Ω—ã–µ Instagram –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n| –ü–æ–ª–Ω–æ–µ –∏–º—è: ${data.username}\n| –ù–∏–∫: ${data.nick}\n| –ö–æ–ª-–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${data.publicationsCount}\n| –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${data.subsCount}\n| Bio: ${data.bio}\nüéÜ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞`)
                })
            } else{
                await getUserNick()
                .then(async (res)=>{
                    await getUserProfile(res)
                    .then(async (data)=>{
                        if(!data){
                            await ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–∞—è @—Å—Å—ã–ª–∫–∞ –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â—ë —Ä–∞–∑')
                            return
                        }
                        await updateInst(data)
                        await ctx.reply(`üìù –î–∞–Ω–Ω—ã–µ Instagram –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n| –ü–æ–ª–Ω–æ–µ –∏–º—è: ${data.username}\n| –ù–∏–∫: ${data.nick}\n| –ö–æ–ª-–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${data.publicationsCount}\n| –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${data.subsCount}\n| Bio: ${data.bio}\nüéÜ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞`)
                    })
                })
            }
        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>updateInstDatas) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const aboutMeCom = async ctx => {
    try {
        if(checkAccess.check(ctx.message.from.id)){
            let msg = ctx.update.message.text
            msg = msg.replace('/aboutme', '')
            msg = msg.trim()

            if(msg.length == 0){
                ctx.reply('‚ùóÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ')
            } else{
                updateAboutMe(msg)
                .then(()=>{
                    ctx.reply('‚úÖ –ò–Ω—Ñ–æ–º–∞—Ü–∏—è –æ —Å–µ–±–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞')
                })
            }
        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>aboutMeCom) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const setTelegramCom = async ctx => {
    try {
        if(checkAccess.check(ctx.message.from.id)){
           let msg = ctx.update.message.text
           msg = msg.replace('/setTelegram','')
           msg = msg.replace('@','')
           msg = msg.replace('https://t.me/', '')
           msg = msg.trim()

           if(msg.length == 0){
            ctx.reply('‚õîÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é @ –ª–∏–±–æ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º')
           } else{
            updateContact(msg,1)
            .then(()=>{
                ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω')
            })
           }
        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>setTelegramCom) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const setMailCom = async ctx => {
    try {
        if(checkAccess.check(ctx.message.from.id)){
           let msg = ctx.update.message.text
           msg = msg.replace('/setMail','')
           msg = msg.trim()

           if(msg.length == 0){
            ctx.reply('‚õîÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—á—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: somebody@mail.com')
           } else{
            updateContact(msg,2)
            .then(()=>{
                ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ—á—Ç—ã –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω')
            })
           }

        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>setMailCom) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const showInterests = async ctx => {
    try {
        if(checkAccess.check(ctx.message.from.id)){
            getInterests()
            .then((data)=>{
                ctx.replyWithHTML(showInterestingsList(data, 1))
            })
        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>showInterests) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

const addInterest = async ctx => {
    try {
        if(checkAccess.check(ctx.message.from.id)){
           let msg = ctx.update.message.text
           msg = msg.replace('/addInt','')
           msg = msg.trim()

           if(msg.length == 0){
            ctx.reply('‚õîÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addInt <emoji> <–∏–Ω—Ç–µ—Ä–µ—Å>')
           } else{
            let emoji = msg.split(' ')

            emoji = emoji[0]

            msg = msg.replace(msg[0], '')
            msg = msg.trim()

            createInterest(emoji,msg)
            .then((data)=>{
                if(!data){
                    ctx.reply('‚õîÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π emoji –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
                    return
                }
                ctx.replyWithHTML(showInterestingsList(data, 2))
            })
            
           }

        } else{
            ctx.reply(REPLY_TEXT.notAccess)
        }
    } catch (e) {
        console.log("\x1b[31m",`[!] (.commands>addInterest) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
    }
}

// const TemplateCom = async ctx => {
//     try {
//         if(checkAccess.check(ctx.message.from.id)){
//            let msg = ctx.update.message.text

//         } else{
//             ctx.reply(REPLY_TEXT.notAccess)
//         }
//     } catch (e) {
//         console.log("\x1b[31m",`[!] (.commands>TemplateCom) –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e}`)
//     }
// }


function showInterestingsList (data, status){
    let result
    if(status == 1){
        result = 'üìú –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:\n'
    } else if(status = 2){
        result = '‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω:\n'
    }

    for(let i = 0; i != data.length; i++){
        result+=`\n${i}. ${data[i].name} - ${data[i].emoji || '<i>emoji –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</i>'}`
    }

    return result
}

module.exports = {
    start,
    help,
    startSetInst,
    cancelAction,
    cancelInst,
    confirmInst,
    startArticlesTutorial,
    startCardsTutorial,
    updateInstDatas,
    aboutMeCom,
    setTelegramCom,
    setMailCom,
    showInterests,
    addInterest
}